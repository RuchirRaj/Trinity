#pragma kernel Main

#include "Common.hlsl"
#include "SimplexNoise3D.hlsl"

StructuredBuffer<float4> PositionSource;
RWBuffer<float4> PositionOut;

CBUFFER_START(Params)
    uint TriangleCount;
    float Time;
    float Amplitude;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    // Vertex indices
    uint i1 = id;
    uint i2 = id + TriangleCount;
    uint i3 = id + TriangleCount * 2;

    // Vertex positions
    float3 p1 = PositionSource[i1].xyz;
    float3 p2 = PositionSource[i2].xyz;
    float3 p3 = PositionSource[i3].xyz;

    // Centroid
    float3 pc = (p1 + p2 + p3) / 3;

    // Clustering
    const float csize = 0.04;
    pc = pc - (frac(pc / csize) - 0.5) * csize;

    // Noise field
    float3 np = pc * 3 + float3(0, 0, Time);
    float param = 1 + snoise(np).w * 1.4 * Amplitude;

    // Modified vertex positions
    float3 p1m = lerp(pc, p1, param);
    float3 p2m = lerp(pc, p2, param);
    float3 p3m = lerp(pc, p3, param);

    // Output
    PositionOut[i1] = float4(p1m, 0);
    PositionOut[i2] = float4(p2m, 0);
    PositionOut[i3] = float4(p3m, 0);
}
