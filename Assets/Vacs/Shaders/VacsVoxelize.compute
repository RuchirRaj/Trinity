#pragma kernel Main

#include "Common.hlsl"
#include "SimplexNoise3D.hlsl"

StructuredBuffer<float4> PositionSource;
RWBuffer<float4> PositionOut;

CBUFFER_START(Params)
    uint TriangleCount;
    float Amplitude;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    // Vertex indices
    uint i1 = id;
    uint i2 = id + TriangleCount;
    uint i3 = id + TriangleCount * 2;

    // Vertex positions
    float3 p1 = PositionSource[i1].xyz;
    float3 p2 = PositionSource[i2].xyz;
    float3 p3 = PositionSource[i3].xyz;

    // Modified vertex positions
    const float size = 0.1;
    float3 p1m = p1 - (frac(p1 / size) - 0.5) * size * Amplitude;
    float3 p2m = p2 - (frac(p2 / size) - 0.5) * size * Amplitude;
    float3 p3m = p3 - (frac(p3 / size) - 0.5) * size * Amplitude;

    // Output
    PositionOut[i1] = float4(p1m, 0);
    PositionOut[i2] = float4(p2m, 0);
    PositionOut[i3] = float4(p3m, 0);
}
