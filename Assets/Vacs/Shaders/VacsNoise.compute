#pragma kernel Main

#include "Common.hlsl"
#include "SimplexNoise3D.hlsl"

StructuredBuffer<float4> PositionSource;
RWBuffer<float4> PositionOut;

CBUFFER_START(Params)
    uint TriangleCount;
    float Time;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    // Vertex indices
    uint i1 = id;
    uint i2 = id + TriangleCount;
    uint i3 = id + TriangleCount * 2;

    // Vertex positions
    float3 p1 = PositionSource[i1].xyz;
    float3 p2 = PositionSource[i2].xyz;
    float3 p3 = PositionSource[i3].xyz;

    float3 offs = float3(0, Time / 2, Time / 4) * 8;

    // Modified vertex positions
    float3 p1m = p1 + snoise(p1*40+offs/20).xyz * pow(abs(snoise(p1*40-offs/3).w), 8) * 1;
    float3 p2m = p2 + snoise(p2*40+offs/20).xyz * pow(abs(snoise(p2*40-offs/3).w), 8) * 1;
    float3 p3m = p3 + snoise(p3*40+offs/20).xyz * pow(abs(snoise(p3*40-offs/3).w), 8) * 1;

    // Output
    PositionOut[i1] = float4(p1m, 0);
    PositionOut[i2] = float4(p2m, 0);
    PositionOut[i3] = float4(p3m, 0);
}
